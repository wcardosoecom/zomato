### IMPORT LIBRARIES ###
import pandas as pd
import inflection
import streamlit as st
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from pandas.core.internals import concat
from PIL import Image
import plotly.express as px
import folium
from streamlit_folium import folium_static
from folium.plugins import MarkerCluster
######################################################################

### FUN√á√ïES ###
### fun√ß√£o country_name() serve para indentificar o pa√≠s do restaurante 
COUNTRIES = {
    1: "India",
    14: "Australia",
    30: "Brazil",
    37: "Canada",
    94: "Indonesia",
    148: "New Zeland",
    162: "Philippines",
    166: "Qatar",
    184: "Singapure",
    189: "South Africa",
    191: "Sri Lanka",
    208: "Turkey",
    214: "United Arab Emirates",
    215: "England",
    216: "United States of America",
}
def country_name(country_id):
    return COUNTRIES[country_id]
##############################

### fun√ß√£o create_price_tye() cria coluna com categoria para o tipo de 
# comida baseado no range de valores
def create_price_tye(price_range):
    if price_range == 1:
        return "1_acessivel"
    elif price_range == 2:
        return "2_regular"
    elif price_range == 3:
        return "3_alto"
    else:
        return "4_superior"
##############################

### fun√ß√£o color_name() cria coluna com o nome das cores baseado em seus c√≥digos
COLORS = {
    "3F7E00": "darkgreen",
    "5BA829": "green",
    "9ACD32": "lightgreen",
    "CDD614": "orange",
    "FFBA00": "red",
    "CBCBC8": "darkred",
    "FF7800": "darkred",
}
def color_name(color_code):
    return COLORS[color_code]
##############################

### fun√ß√£o que renomeia as colunas 
def rename_columns(dataframe):
    df1 = dataframe.copy()
    title = lambda x: inflection.titleize(x)
    snakecase = lambda x: inflection.underscore(x)
    spaces = lambda x: x.replace(" ", "")
    cols_old = list(df1.columns)
    cols_old = list(map(title, cols_old))
    cols_old = list(map(spaces, cols_old))
    cols_new = list(map(snakecase, cols_old))
    df1.columns = cols_new
    return df1
##############################

############################################################

### IMPORT DATASET + COPY ###
df = pd.read_csv('dataset/zomato.csv')
df1 = df.copy()
######################################################################

### LIMPEZA DE DADOS ###
### aplica√ß√£o da fun√ß√£o country_name 
df1['Country'] = df1['Country Code'].apply(country_name)
### aplica√ß√£o da fun√ß√£o create_price_tye
df1['Price Tye'] = df1['Price range'].apply(create_price_tye)
### aplica√ß√£o da fun√ß√£o color_name
df1['Color'] = df1['Rating color'].apply(color_name)
### aplica√ß√£o da fun√ß√£o rename_columns
df1 = rename_columns(df1)
### definindo o tipo de culin√°ria principal do restaurante
df1["cuisines"] = df1.loc[:, "cuisines"].apply(lambda x: str(x).split(",")[0])
######################################################################


### =================================================== ###
#                   Index                         #
### =================================================== ###

st.set_page_config(page_title='Insights', page_icon='üîç;', layout='wide')

# colocando a imagem:
image_path = 'logo.png'
image = Image.open('logo.png')
st.sidebar.image(image, width=240)

st.header('Dashboard Zomato - Insights')


### =================================================== ###
#                   Barra lateral                         #
### =================================================== ###


# informa√ß√µes da barra lateral
#st.sidebar.markdown('## Zomato')
st.sidebar.markdown('### Food Delivery & Dining')
st.sidebar.markdown(""" --- """)
# multipla sele√ß√£o de pa√≠ses
st.sidebar.markdown('#### Filtro')
traffic_options = st.sidebar.multiselect(
    'Selecione os pa√≠ses',
    ['Philippines','Brazil','Australia', 'Canada', 'England', 'India', 'Indonesia', 'New Zeland', 'Qatar', 'Singapure', 'South Africa', 'Sri Lanka', 'Turkey', 'United Arab Emirates', 'United States of America'],
    default=['Philippines','Brazil','Australia', 'Canada', 'England', 'India', 'Indonesia', 'New Zeland', 'Qatar', 'Singapure', 'South Africa', 'Sri Lanka', 'Turkey', 'United Arab Emirates', 'United States of America'])
# aplicando o filtro de pa√≠ses
linhas_selecionadas = df1['country'].isin(traffic_options)
df1 = df1.loc[linhas_selecionadas, :]
# testar se o filtro funcionou
#st.dataframe(df1.head())

st.sidebar.markdown('#### Dados tratados')
st.sidebar.download_button(
label="Download",
data=df1.to_csv(),
file_name='zomato.csv',
mime='text/csv')

st.sidebar.markdown(""" --- """)
st.sidebar.markdown('###### Powered by William Cardoso')

### =================================================== ###
#                   layout streamlit                      #
### =================================================== ###

tab1, tab2 = st.tabs(
    ['Propostas para an√°lises adicionais', 'Gr√°ficos adicionais'])

with tab1:  
    with st.container():
        st.markdown('#### Pa√≠ses')
        '''
1. An√°lise temporal da expans√£o internacional:
- Mapear detalhadamente a cronologia de expans√£o da Zomato al√©m do mercado indiano
- Identificar padr√µes de crescimento e velocidade de penetra√ß√£o em novos mercados
- Avaliar a taxa de sucesso em diferentes regi√µes geogr√°ficas para projetar tend√™ncias futuras de expans√£o

2. Estudo dos fatores de sucesso na Indon√©sia
- Investigar as caracter√≠sticas espec√≠ficas do mercado gastron√¥mico indon√©sio
- Analisar o perfil dos estabelecimentos mais bem avaliados
- Examinar as pol√≠ticas de relacionamento com parceiros e estrat√©gias de engajamento com usu√°rios
- Avaliar aspectos culturais e comportamentais que possam influenciar as avalia√ß√µes positivas

3. An√°lise comparativa Indon√©sia-Austr√°lia
- Identificar padr√µes comuns entre os mercados que contribuem para o alto desempenho
- Estudar as pr√°ticas operacionais bem-sucedidas que possam ser replicadas em outros mercados
- Desenvolver um framework de boas pr√°ticas baseado nas experi√™ncias positivas destes pa√≠ses
- Elaborar recomenda√ß√µes estrat√©gicas para aprimoramento das opera√ß√µes em outros mercados'''
    st.markdown(""" --- """)

with tab1:  
    with st.container():
        st.markdown('#### Cidades')
    '''
    1. Identificar poss√≠veis barreiras para expans√£o do servi√ßo de entregas em outras localidades

    2. Estudo da diversidade culin√°ria
    - Mapear a distribui√ß√£o de tipos de culin√°ria por regi√£o
    - Analisar a rela√ß√£o entre diversidade culin√°ria e demografia local
    - Identificar oportunidades de expans√£o do card√°pio em mercados espec√≠ficos

    3. Aprofundamento do caso Londres
    - Examinar os fatores que contribuem para o alto desempenho da cidade
    - Estudar a rela√ß√£o entre diversidade culin√°ria e satisfa√ß√£o dos usu√°rios
    - Aventar a possibilidade de desenvolvimento de benchmarks baseados no modelo londrino para aplica√ß√£o em outros mercados urbanos
    '''
    st.markdown(""" --- """)

with tab1:  
    with st.container():
        st.markdown('#### Restaurantes')
    '''
    1. An√°lise aprofundada do servi√ßo de delivery
    - Investigar o perfil e motiva√ß√£o dos usu√°rios que mais avaliam restaurantes com delivery
    - Analisar a rela√ß√£o entre tempo de entrega e satisfa√ß√£o do cliente

    2. Estudo do sistema de reservas
    - Examinar a correla√ß√£o entre o sistema de reservas e o ticket m√©dio dos estabelecimentos
    - Avaliar o impacto do sistema de reservas em diferentes categorias de restaurantes
    - Identificar fatores que contribuem para a maior satisfa√ß√£o em restaurantes com sistema de reservas

    3. Aprofundamento do caso Domino's Pizza
    - Realizar um benchmark detalhado das pr√°ticas operacionais da rede
    - Estudar a evolu√ß√£o temporal das avalia√ß√µes para identificar melhorias implementadas
    - Investigar a rela√ß√£o entre campanhas promocionais e volume de avalia√ß√µes
    - Realizar um planejamento para melhoria na satisfa√ß√£o dos clientes com o restaurante
    '''
    st.markdown(""" --- """)


def price_rating(df1, coluna):
    """ Essa fun√ß√£o cria um gr√°fico de barras com os 5 pa√≠ses com o melhor desempenho.
    coluna = 'aggregate_rating' (nota m√©dia) ou 'votes' (m√©dia de avalia√ß√µes)
    Input = Dataframe
    Output = Gr√°fico de barras
    """
    price_plus = (df1[['price_tye', coluna]].groupby('price_tye')[coluna].mean().sort_values(ascending=False).reset_index().round(2))
    if coluna == 'aggregate_rating':
        y_name = 'Nota meÃÅdia'
    else:
        y_name = 'M√©dia de avalia√ß√µes recebidas por restaurante'
    fig = px.bar(price_plus, 
                x='price_tye', 
                y=coluna,
                labels={'price_tye': 'Pa√≠s', coluna: y_name})
    fig.update_traces(marker=dict(color='red'))
    fig.update_layout(
        xaxis_title='Pa√≠ses',
        yaxis_title=y_name,
        xaxis_tickangle=-45,
        showlegend=False,
        height=600,
        width=500,
        font_color='white')
    fig.update_traces(hovertemplate='Pa√≠s: %{x}<br>M√©dia: %{y}')
    return fig
##############################


with tab2:  
    with st.container():
        st.markdown('#### Gr√°ficos adicionais')
        '''
A partir das an√°lises realizadas, surgiu uma hip√≥tese para an√°lise e verificou-se a necessidade de analisar os poss√≠veis 
impactos da categoria de pre√ßos dos restaurantes
em rela√ß√£o as avalia√ß√µes dos usu√°rios. Para isso, foram realizados os seguintes passos:

Hip√≥tese: a faixa de pre√ßo praticada pelo restaurante influencia no desempenho das avalia√ß√µes?
- Cria√ß√£o de uma nova coluna no dataframe com categoriza√ß√£o de pre√ßos baseado no range de valores
- Tratamento dos dados relacionados as avalia√ß√µes dos usu√°rios
- Cria√ß√£o de dois novos gr√°ficos para an√°lise geral da correla√ß√£o entre pre√ßos e avalia√ß√µes

'''
    with st.container():
        col1, col2 = st.columns(2, gap='large')
        with col1: #grafico de barras 1/2 color = RED
            st.markdown('##### M√©dia de avalia√ß√µes recebidas por faixa de pre√ßo')
            fig = price_rating(df1, 'votes')
            st.plotly_chart(fig)
        ###
        with col2: #grafico de barras 1/2 color = RED
            st.markdown('##### Nota m√©dia por faixa de pre√ßo')
            fig = price_rating(df1, 'aggregate_rating')
            st.plotly_chart(fig)
        ###


    with st.container():# An√°lise da page
        expander = st.expander("An√°lises relevantes e considera√ß√µes finais")
        expander.write('''
            Pode-se afirmar que a maioria dos restaurantes est√£o nas categorias de pre√ßos Regular e Alto, onde os restaurantes que trabalham
                       com a faixa de pre√ßo Alto possuem melhor nota m√©dia (4.22) al√©m de receberem um volume muito maior de avalia√ß√µes. Destaca-se
                       negativamente a categoria Acess√≠vel tanto em quantidade de avalia√ß√µes recebidas quanto em nota m√©dia.

            A partir dessa nova an√°lise gr√°fica, podemos afirmar que o principal fator de desempenho dos restaurantes √© a qualidade de sua comida. Al√©m
            disso podem ser definidas novas hip√≥teses para a sequ√™ncia desse Dashboard, considerando relacionar diversos indicadores com a categoriza√ß√£o de pre√ßos
                       para obter respostas aos problemas de neg√≥cio da opera√ß√£o Zomato.
        ''')
        st.markdown(""" --- """)